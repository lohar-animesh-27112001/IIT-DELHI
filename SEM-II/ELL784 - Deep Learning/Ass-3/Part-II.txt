# -------------------- Patch Embedding --------------------
class PatchEmbedding(nn.Module):
    def __init__(self, image_size, patch_size, in_channels, embed_dim):
        super().__init__()
        self.patch_size = patch_size
        self.num_patches = (image_size // patch_size) ** 2
        self.proj = nn.Conv2d(in_channels, embed_dim, kernel_size=patch_size, stride=patch_size)

    def forward(self, x):
        x = self.proj(x)  # (B, embed_dim, H/P, W/P)
        x = x.flatten(2).transpose(1, 2)  # (B, num_patches, embed_dim)
        return x

# -------------------- Multi-Head Attention --------------------
class MultiHeadAttention(nn.Module):
    def __init__(self, embed_dim, num_heads, attention_type='vanilla', linformer_k=None, dropout=0.0):
        super().__init__()
        assert embed_dim % num_heads == 0
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.head_dim = embed_dim // num_heads
        self.scale = self.head_dim ** 0.5
        self.attention_type = attention_type
        self.k = linformer_k

        self.Wq = nn.Linear(embed_dim, embed_dim, bias=False)
        self.Wk = nn.Linear(embed_dim, embed_dim, bias=False)
        self.Wv = nn.Linear(embed_dim, embed_dim, bias=False)
        self.Wo = nn.Linear(embed_dim, embed_dim, bias=False)
        self.dropout = nn.Dropout(dropout)

        if attention_type == 'linformer':
            self.E = None
            self.F = None

    def _init_linformer_params(self, seq_len, device):
        if self.E is None or self.E.shape[0] != seq_len:
            self.E = nn.Parameter(torch.randn(seq_len, self.k, device=device) * (1.0 / (seq_len ** 0.5)))
            self.F = nn.Parameter(torch.randn(seq_len, self.k, device=device) * (1.0 / (seq_len ** 0.5)))

    def forward(self, x):
        B, N, _ = x.size()
        Q = self.Wq(x).view(B, N, self.num_heads, self.head_dim).permute(0,2,1,3)
        K = self.Wk(x).view(B, N, self.num_heads, self.head_dim).permute(0,2,1,3)
        V = self.Wv(x).view(B, N, self.num_heads, self.head_dim).permute(0,2,1,3)

        if self.attention_type == 'vanilla':
            scores = (Q @ K.transpose(-2, -1)) / self.scale
            attn = F.softmax(scores, dim=-1)
            self.last_attn = attn.detach().cpu()
            out = attn @ V

        elif self.attention_type == 'linformer':
            self._init_linformer_params(N, x.device)
            K_proj = (K.transpose(-2, -1) @ self.E).transpose(-2, -1)
            V_proj = (V.transpose(-2, -1) @ self.F).transpose(-2, -1)
            scores = (Q @ K_proj.transpose(-2, -1)) / self.scale
            attn = F.softmax(scores, dim=-1)
            self.last_attn = attn.detach().cpu()
            out = attn @ V_proj

        elif self.attention_type == 'uniform':
            attn = torch.full((B, self.num_heads, N, N), 1/N, device=x.device)
            self.last_attn = attn.detach().cpu()
            out = attn @ V

        out = out.permute(0,2,1,3).contiguous().view(B, N, self.embed_dim)
        return self.Wo(out)

# -------------------- Transformer Block --------------------
class TransformerBlock(nn.Module):
    def __init__(self, embed_dim, num_heads, mlp_dim, dropout, attention_type='vanilla', linformer_k=None):
        super().__init__()
        self.attention = MultiHeadAttention(embed_dim, num_heads, attention_type, linformer_k, dropout)
        self.norm1 = nn.LayerNorm(embed_dim)
        self.norm2 = nn.LayerNorm(embed_dim)
        self.ff = nn.Sequential(
            nn.Linear(embed_dim, mlp_dim),
            nn.GELU(),
            nn.Linear(mlp_dim, embed_dim),
            nn.Dropout(dropout)
        )

    def forward(self, x):
        x = self.norm1(x + self.attention(x))
        x = self.norm2(x + self.ff(x))
        return x

# -------------------- Vision Transformer --------------------
class VisionTransformer(nn.Module):
    def __init__(self, image_size=28, patch_size=7, in_channels=1, num_classes=10,
                 embed_dim=64, num_heads=8, num_layers=3, mlp_dim=128,
                 dropout=0.1, attention_type='vanilla', linformer_k=16):
        super().__init__()
        self.patch_embed = PatchEmbedding(image_size, patch_size, in_channels, embed_dim)
        num_patches = self.patch_embed.num_patches
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        self.dropout = nn.Dropout(dropout)

        self.blocks = nn.ModuleList([
            TransformerBlock(embed_dim, num_heads, mlp_dim, dropout, attention_type, linformer_k)
            for _ in range(num_layers)
        ])
        self.norm = nn.LayerNorm(embed_dim)
        self.mlp_head = nn.Linear(embed_dim, num_classes)

    def forward(self, x):
        x = self.patch_embed(x)
        cls_tokens = self.cls_token.expand(x.size(0), -1, -1)
        x = torch.cat((cls_tokens, x), dim=1)
        x = x + self.pos_embed[:, :x.size(1)]
        x = self.dropout(x)
        for block in self.blocks:
            x = block(x)
        x = self.norm(x)
        return F.log_softmax(self.mlp_head(x[:, 0]), dim=-1)

# -------------------- Training & Evaluation --------------------
# Load MNIST
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])
trainset = datasets.MNIST('./data', train=True, download=True, transform=transform)
testset = datasets.MNIST('./data', train=False, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)

# Initialize models
attention_types = ['vanilla', 'linformer', 'uniform']
models = {
    name: VisionTransformer(attention_type=name).to(device)
    for name in attention_types
}

criterions = {name: nn.NLLLoss() for name in models}
optimizers = {name: optim.Adam(model.parameters(), lr=5e-4) for name, model in models.items()}

# Train
for epoch in range(1, 6):
    for model in models.values():
        model.train()
    correct = {name: 0 for name in models}
    losses = {name: 0.0 for name in models}
    total = 0

    for imgs, labels in trainloader:
        imgs, labels = imgs.to(device), labels.to(device)
        total += labels.size(0)
        for name, model in models.items():
            optimizers[name].zero_grad()
            out = model(imgs)
            loss = criterions[name](out, labels)
            loss.backward()
            optimizers[name].step()
            losses[name] += loss.item()
            correct[name] += (out.argmax(1) == labels).sum().item()

    print(f"Epoch {epoch}")
    for name in models:
        print(f"  {name:<9}: Loss={losses[name]:.4f}, Acc={100*correct[name]/total:.2f}%")

# Evaluate
for name, model in models.items():
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for imgs, labels in testloader:
            imgs, labels = imgs.to(device), labels.to(device)
            out = model(imgs)
            correct += (out.argmax(1) == labels).sum().item()
            total += labels.size(0)
    print(f"Test Accuracy [{name}]: {100*correct/total:.2f}%")

# -------------------- Attention Map Visualization --------------------
sample_img, _ = next(iter(testloader))
sample_img = sample_img[0:1].to(device)

fig, axes = plt.subplots(1, 3, figsize=(12,4))
for ax, name in zip(axes, attention_types):
    _ = models[name](sample_img)
    attn_map = models[name].blocks[0].attention.last_attn[0][0]  # first batch, first head
    # Only reshape if size matches expected patch count (16)
    if cls_attn[1:].numel() == 16:
        patch_attn = cls_attn[1:].reshape(4, 4)
    else:
        # fallback to visualize what we have
        patch_attn = F.pad(cls_attn[1:], (0, 16 - cls_attn[1:].numel()), value=0).reshape(4, 4)
    ax.imshow(patch_attn, cmap='hot')
    ax.set_title(f"{name.capitalize()} Attention")
    ax.axis('off')
plt.tight_layout()
plt.show()
