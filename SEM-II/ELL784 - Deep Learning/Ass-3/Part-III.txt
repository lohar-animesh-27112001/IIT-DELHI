# Combined Part-1/2/3 Code: Vision Transformers for MNIST
# Includes: Vanilla ViT, Linformer ViT, Uniform Attention ViT, and Multi-Scale ViT

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
import matplotlib.pyplot as plt

# -------------------- Part 1/2 Model (VisionTransformer) --------------------
class PatchEmbedding(nn.Module):
    def __init__(self, image_size, patch_size, in_channels, embed_dim):
        super().__init__()
        self.proj = nn.Conv2d(in_channels, embed_dim, kernel_size=patch_size, stride=patch_size)
        self.num_patches = (image_size // patch_size) ** 2
    def forward(self, x):
        x = self.proj(x)                     # (B, embed_dim, H/P, W/P)
        x = x.flatten(2).transpose(1, 2)     # (B, num_patches, embed_dim)
        return x

class MultiHeadAttention(nn.Module):
    def __init__(self, embed_dim, num_heads, attention_type='vanilla', linformer_k=None, dropout=0.1):
        super().__init__()
        assert embed_dim % num_heads == 0
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.head_dim = embed_dim // num_heads
        self.scale = self.head_dim ** 0.5
        self.attention_type = attention_type
        self.linformer_k = linformer_k
        # QKV
        self.Wq = nn.Linear(embed_dim, embed_dim, bias=False)
        self.Wk = nn.Linear(embed_dim, embed_dim, bias=False)
        self.Wv = nn.Linear(embed_dim, embed_dim, bias=False)
        self.Wo = nn.Linear(embed_dim, embed_dim, bias=False)
        self.dropout = nn.Dropout(dropout)
        # Linformer projections
        if attention_type == 'linformer':
            self.E = None
            self.F = None
    def _init_linformer(self, N, device):
        if self.E is None or self.E.shape[0] != N:
            k = self.linformer_k
            self.E = nn.Parameter(torch.randn(N, k, device=device) * (1/N**0.5))
            self.F = nn.Parameter(torch.randn(N, k, device=device) * (1/N**0.5))
    def forward(self, x):  # x: (B, N, D)
        B, N, D = x.shape
        Q = self.Wq(x).view(B, N, self.num_heads, self.head_dim).permute(0,2,1,3)
        K = self.Wk(x).view(B, N, self.num_heads, self.head_dim).permute(0,2,1,3)
        V = self.Wv(x).view(B, N, self.num_heads, self.head_dim).permute(0,2,1,3)
        if self.attention_type == 'vanilla':
            scores = (Q @ K.transpose(-2,-1)) / self.scale
            attn = F.softmax(scores, dim=-1)
            self.last_attn = attn.detach().cpu()
            out = attn @ V
        elif self.attention_type == 'linformer':
            self._init_linformer(N, x.device)
            Kp = (K.transpose(-2,-1) @ self.E).transpose(-2,-1)
            Vp = (V.transpose(-2,-1) @ self.F).transpose(-2,-1)
            scores = (Q @ Kp.transpose(-2,-1)) / self.scale
            attn = F.softmax(scores, dim=-1)
            self.last_attn = attn.detach().cpu()
            out = attn @ Vp
        elif self.attention_type == 'uniform':
            attn = torch.full((B, self.num_heads, N, N), 1/N, device=x.device)
            self.last_attn = attn.detach().cpu()
            out = attn @ V
        else:
            raise ValueError
        out = out.permute(0,2,1,3).reshape(B, N, D)
        return self.Wo(out)

class TransformerBlock(nn.Module):
    def __init__(self, embed_dim, num_heads, mlp_dim, dropout, attention_type, linformer_k=None):
        super().__init__()
        self.attn = MultiHeadAttention(embed_dim, num_heads, attention_type, linformer_k, dropout)
        self.norm1 = nn.LayerNorm(embed_dim)
        self.norm2 = nn.LayerNorm(embed_dim)
        self.ff = nn.Sequential(
            nn.Linear(embed_dim, mlp_dim), nn.GELU(),
            nn.Linear(mlp_dim, embed_dim), nn.Dropout(dropout)
        )
    def forward(self, x):
        x = self.norm1(x + self.attn(x))
        x = self.norm2(x + self.ff(x))
        return x

class VisionTransformer(nn.Module):
    def __init__(self, image_size=28, patch_size=7, in_channels=1, num_classes=10,
                 embed_dim=64, num_heads=8, num_layers=3, mlp_dim=128,
                 dropout=0.1, attention_type='vanilla', linformer_k=16):
        super().__init__()
        self.patch_embed = PatchEmbedding(image_size, patch_size, in_channels, embed_dim)
        self.cls_token = nn.Parameter(torch.zeros(1,1,embed_dim))
        num_patches = self.patch_embed.num_patches
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches+1, embed_dim))
        self.dropout = nn.Dropout(dropout)
        self.blocks = nn.ModuleList([
            TransformerBlock(embed_dim,num_heads,mlp_dim,dropout,attention_type,linformer_k)
            for _ in range(num_layers)
        ])
        self.norm = nn.LayerNorm(embed_dim)
        self.head = nn.Linear(embed_dim, num_classes)
    def forward(self,x):
        B = x.size(0)
        x = self.patch_embed(x)
        cls = self.cls_token.expand(B,-1,-1)
        x = torch.cat((cls,x), dim=1)
        x = x + self.pos_embed[:, :x.size(1)]
        x = self.dropout(x)
        for blk in self.blocks: x = blk(x)
        x = self.norm(x)
        return F.log_softmax(self.head(x[:,0]), dim=-1)

# -------------------- Part 3 Model (Multi-Scale ViT Refactored) --------------------
class MultiScalePatchEmbedding(nn.Module):
    def __init__(self, image_size, patch_sizes, in_channels, embed_dim):
        super().__init__()
        self.patch_sizes = patch_sizes
        self.embedders = nn.ModuleList([
            nn.Conv2d(in_channels, embed_dim, kernel_size=p, stride=p)
            for p in patch_sizes
        ])
        # compute number of patches per scale
        self.num_patches = [(image_size // p) ** 2 for p in patch_sizes]

    def forward(self, x):
        # returns list of embeddings per scale
        embs = []
        for conv in self.embedders:
            y = conv(x)  # [B,D,H/p,W/p]
            B, D, Hc, Wc = y.shape
            y = y.flatten(2).transpose(1, 2)  # [B, N_i, D]
            embs.append(y)
        return embs

class MultiScaleMultiHeadAttention(nn.Module):
    def __init__(self, embed_dim, num_heads, num_scales, dropout=0.1):
        super().__init__()
        assert num_heads % num_scales == 0
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.num_scales = num_scales
        self.heads_per_scale = num_heads // num_scales
        self.head_dim = embed_dim // num_heads
        self.scale = self.head_dim ** 0.5

        self.qkv = nn.ModuleList([
            nn.Linear(embed_dim, 3 * self.heads_per_scale * self.head_dim)
            for _ in range(num_scales)
        ])
        # output per scale remains embed_dim per token
        self.proj = nn.ModuleList([
            nn.Linear(self.heads_per_scale * self.head_dim, embed_dim)
            for _ in range(num_scales)
        ])
        self.dropout = nn.Dropout(dropout)

    def forward(self, embs):
        # embs: list of [B, N_i, D]
        out_embs = []
        for i, x in enumerate(embs):
            B, N, D = x.size()
            qkv = self.qkv[i](x).reshape(B, N, 3, self.heads_per_scale, self.head_dim)
            q, k, v = qkv.unbind(2)
            # shape each to [B, heads, N, head_dim]
            q = q.permute(0,2,1,3)
            k = k.permute(0,2,1,3)
            v = v.permute(0,2,1,3)
            scores = (q @ k.transpose(-2, -1)) / self.scale
            attn = F.softmax(scores, dim=-1)
            attn = self.dropout(attn)
            ctx = attn @ v  # [B, heads, N, head_dim]
            ctx = ctx.permute(0,2,1,3).reshape(B, N, -1)  # [B, N, heads*head_dim]
            # project back to embed_dim
            out = self.proj[i](ctx)  # [B, N, D]
            out_embs.append(out)
        return out_embs  # list of [B, N_i, D]

class MultiScaleTransformerBlock(nn.Module):
    def __init__(self, embed_dim, num_heads, mlp_dim, num_scales, dropout=0.1):
        super().__init__()
        self.attn = MultiScaleMultiHeadAttention(embed_dim, num_heads, num_scales, dropout)
        self.norm1 = nn.ModuleList([
            nn.LayerNorm(embed_dim) for _ in range(num_scales)
        ])
        self.norm2 = nn.ModuleList([
            nn.LayerNorm(embed_dim) for _ in range(num_scales)
        ])
        self.ff = nn.ModuleList([
            nn.Sequential(
                nn.Linear(embed_dim, mlp_dim), nn.GELU(),
                nn.Linear(mlp_dim, embed_dim), nn.Dropout(dropout)
            ) for _ in range(num_scales)
        ])

    def forward(self, embs):
        # embs: list of [B, N_i, D]
        out_embs = []
        attn_outs = self.attn(embs)  # list of [B, N_i, D]
        for i, (x, attn_o) in enumerate(zip(embs, attn_outs)):
            # attention + residual + norm
            y = self.norm1[i](x + attn_o)
            # ff + residual + norm
            y = self.norm2[i](y + self.ff[i](y))
            out_embs.append(y)
        return out_embs

class MultiScaleVisionTransformer(nn.Module):
    def __init__(self, image_size=28, patch_sizes=[7,14], in_channels=1,
                 num_classes=10, embed_dim=64, num_heads=8,
                 num_layers=3, mlp_dim=128, dropout=0.1):
        super().__init__()
        self.patch_embed = MultiScalePatchEmbedding(image_size, patch_sizes, in_channels, embed_dim)
        self.num_scales = len(patch_sizes)
        total_patches = sum(self.patch_embed.num_patches)
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, 1 + total_patches, embed_dim))
        self.dropout = nn.Dropout(dropout)
        self.blocks = nn.ModuleList([
            MultiScaleTransformerBlock(embed_dim, num_heads, mlp_dim, self.num_scales, dropout)
            for _ in range(num_layers)
        ])
        self.norm = nn.LayerNorm(embed_dim)
        self.head = nn.Linear(embed_dim, num_classes)

    def forward(self, x):
        embs = self.patch_embed(x)  # list of [B, N_i, D]
        # pass through blocks
        for blk in self.blocks:
            embs = blk(embs)  # list in, list out
        # concatenate final embeddings
        x = torch.cat(embs, dim=1)  # [B, sum N_i, D]
        # prepend CLS
        B = x.size(0)
        cls = self.cls_token.expand(B, -1, -1)
        x = torch.cat((cls, x), dim=1)  # [B, 1+sum N_i, D]
        x = x + self.pos_embed[:, :x.size(1)]
        x = self.dropout(x)
        x = self.norm(x)
        # classification
        cls_out = x[:, 0]  # [B, D]
        return F.log_softmax(self.head(cls_out), dim=-1)

# -------------------- Training & Evaluation & Plotting --------------------
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])
trainset = datasets.MNIST('./data', True, download=True, transform=transform)
testset = datasets.MNIST('./data', False, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

models = {
    'vanilla': VisionTransformer().to(device),
    'linformer': VisionTransformer(attention_type='linformer', linformer_k=16).to(device),
    'uniform': VisionTransformer(attention_type='uniform').to(device),
    'multiscale': MultiScaleVisionTransformer().to(device)
}
criterions = {n: nn.NLLLoss() for n in models}
optimizers = {n: optim.Adam(m.parameters(), lr=5e-4) for n, m in models.items()}
hist = {n: {'acc': [], 'test': 0} for n in models}

# Train
for ep in range(1, 4):
    for m in models.values(): m.train()
    corr = {n: 0 for n in models}; tot = 0
    for imgs, labels in trainloader:
        imgs, labels = imgs.to(device), labels.to(device); tot += labels.size(0)
        for n, m in models.items():
            optimizers[n].zero_grad()
            out = m(imgs)
            loss = criterions[n](out, labels)
            loss.backward()
            optimizers[n].step()
            corr[n] += (out.argmax(1) == labels).sum().item()
    for n in models: hist[n]['acc'].append(100 * corr[n] / tot)

# Test
for n, m in models.items():
    m.eval(); c = 0; T = 0
    with torch.no_grad():
        for imgs, labels in testloader:
            imgs, labels = imgs.to(device), labels.to(device)
            c += (m(imgs).argmax(1) == labels).sum().item(); T += labels.size(0)
    hist[n]['test'] = 100 * c / T; print(f"{n} Test: {hist[n]['test']:.2f}%")

# Plot
plt.figure()
for n in models: plt.plot(hist[n]['acc'], label=n)
plt.xlabel('Epoch'); plt.ylabel('Train Acc (%)'); plt.legend(); plt.show()
